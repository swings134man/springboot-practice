- Spring AOP 에 대하여.

-> AOP는 관점(Aspect) 지향 프로그래밍으로, 관점을 기준으로 다양한 '기능'을 분리하여 보는 프로그래밍.
    관점(Aspect)란, 부가 기능과 그 적용처를 정의하고 합쳐서 모듈로 만든것.

** 용어 설명 --------------------------------------------------------------------------------------------
1. Aspect
    - 공통 기능
    - Advice + PointCut을 모듈화한 어플리케이션의 횡단 기능.

2. Join Point
    - 어플리케이션 실행 흐름에서의 특정 포인트 (ex. 클래스 초기화, 메서드 호출, 예외 발생등)
    - 한 마디로 AOP를 적용할 수 있는 모든 지점(스프링에서는 메서드 실행 지점으로 제한 함.)

3. Advice
    - Aspect를 언제 코드에 적용할지 정의함. -> 시점 정의
    - join point 에서 실행되는 code -> 즉 부가기능 그 자체를 뜻함.

4. Point Cut
    - join point의 부분집합이며, '실제 Advice가' 적용되는 JoinPoint를 나타냄.
    - join point 중 Advice가 적용될 지점을 선별하는 기능
    - 주로 AspectJ 표현식으로 지정함.(또는 정규 표현식)
        -> 해당 문법을 통해 Point Cut 정의함.

5. Target
    - 핵심 기능을 담은 모듈 (= 부가 기능 부여 대상)
    - 어드바이스를 받는 개체이고, 포인트컷으로 결정됨

6. Advisor
    - 스프링 AOP 에서만 쓰는 용어로, 하나의 어드바이스와 하나의 포인트컷으로 구성된 에스펙트를 특별하게 지칭하는 말.


* Annotation --------------------------------------------------------------------------------------------
     주요 Annotation
     @Aspect : 자바에서 사용하는 AOP 프레임워크에 포함되며, AOP를 정의하는 Class에 할당
     @Pointcut : 기능을 어디에 적용시킬지, 메소드나 Annotation 등 AOP를 적용 시킬 지점을 설정
     @Before : 메서드 실행하기 이전
     @After : 메서드가 성공적으로 실행 후, 예외가 발생 되더라도 실행
     @AfterReturning : 메서드 호출 성공 실행 시 (Not Throws)
     @AfterThrowing : 메서드 호출 실패 예외 발생 (Throws)
     @Around : Before / After 모두 제어


* Methods --------------------------------------------------------------------------------------------

    - Before : Method 시작 시 동작.
    - After : Method 종료 후 동작.
    - AfterReturning : Method 정상 종료시 동작.
    - Around : Method 호출 전후 동작 (proceed() 기준으로 전은 before, 후는 after임 -> 순서 지켜야함.
    - AfterThrowing : Method 호출이 예외를 던졌을 때.